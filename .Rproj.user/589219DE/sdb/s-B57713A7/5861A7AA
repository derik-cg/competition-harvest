{
    "contents" : "#this files simulates a community of five populations competing\n#according to the Lotka-Volterra assumptions.\n#the objective is to try intransitive topologies of the\n#competition network\n#this applies laird et al 2009 on a lv system\n\nlibrary(deSolve)\nrm(list=ls())\n\n#the size of the system is \nsize<-5\n\n# define the parameter vectors\nrs<-rep(0.5,size) #growth rates\nks<-rep(100,size) #carrying capacities\n\n#define alphas zeros indicate no interaction\nalphas<-matrix(0,nrow=size,ncol=size) #competition coefs.\n\n#define the state variables (populations) and their initial conditions are\n#since this is a matrix notation system, use a named vector for \n#graphing purposes.\nstate<-rep(10, size)\nnames(state)<-paste(\"N\",1:size,sep=\"\")\n\n#to assign the competition coefficients, it was assumed \n#pairwise competitions in competitive exclussion\n#then if A->B kB/kA < alpha21 and  kB/kA > alpha12\n#        A<-B kB/kA > alpha21  and kA/kB < alpha12\n#        ####       #                    #\n##alpha[1,1]<- 0\nalphas[1,2]<- 1.5 # 1->2\nalphas[2,1]<- 0.5 ##1->2  \nalphas[1,3]<- 1.5 # 1->3\nalphas[3,1]<- 0.5 ##1->3\nalphas[1,4]<- 0.5 # 1<-4\nalphas[4,1]<- 1.5 ##1<-4\nalphas[1,5]<- 0.5 # 1<-5\nalphas[5,1]<- 1.5 ##1<-5\n##  alpha[2,2]<- 0\nalphas[2,3]<- 1.5 # 2->3\nalphas[3,2]<- 0.5 ##2->3\nalphas[2,4]<- 1.5 # 2->4\nalphas[4,2]<- 0.5 ##2->4\nalphas[2,5]<- 0.5 # 2<-5\nalphas[5,2]<- 1.5 ##2<-5\n##  a33<-0\nalphas[3,4]<- 1.5 # 3->4\nalphas[4,3]<- 0.5 ##3->4\nalphas[3,5]<- 1.5 #3 ->5\nalphas[5,3]<- 0.5 ##3->5\n##  a44<-0\nalphas[4,5]<- 1.5 # 4->5\nalphas[5,4]<- 0.5 ##4<-5\n#alphas[5,5]<-0\n\n\n#gather all parameters in a list\nparameters<-list(rs=rs,\n                 ks=ks,\n                 alphas=alphas)\n\n#define the vector of output times\ntimes<-seq(from=0,to=100,by=0.5)\n\n#define the differential equation\n\nlvccmat<-function(t,Y,parameters)\n{\n  y<- Y #transform Y in a local vector\n  #use the local vector to construct the system of ODEs\n  #and assign it to the vector of ODEs\n  dY<- rs*y - (rs*y^2 + rs*colSums(outer(y,y,FUN =\"*\")*alphas))*(1/ks)\n  #return the whole vector for the output\n  return(list(dY))\n}\n\n#now do the simulation\n\nout<-ode(y=state,times=times,func=lvccmat)\n#this plots the output\nplot(out)\n",
    "created" : 1455223230814.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1069463582",
    "id" : "5861A7AA",
    "lastKnownWriteTime" : 1455316157,
    "path" : "~/harvest/R/lvcc5sp.R",
    "project_path" : "lvcc5sp.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}