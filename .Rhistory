out<-ode(y=state,times=times,func=lvccmat)
plot(out)
alphas<-matrix(c(1, 1, 1, 1),nrow=2,byrow = T) #competition coefs.
out<-ode(y=state,times=times,func=lvccmat)
plot(out)
alphas<-matrix(c(0, 0.1, 0, 0.1),nrow=2,byrow = T) #competition coefs.
out<-ode(y=state,times=times,func=lvccmat)
plot(out)
alphas<-matrix(c(0, 0.001, 0, 0.001),nrow=2,byrow = T) #competition coefs.
out<-ode(y=state,times=times,func=lvccmat)
plot(out)
alphas<-matrix(c(0, 0.9, 0, 0.9),nrow=2,byrow = T) #competition coefs.
out<-ode(y=state,times=times,func=lvccmat)
plot(out)
alphas<-matrix(c(0, 0.1, 0.1, 0),nrow=2,byrow = T) #competition coefs.
out<-ode(y=state,times=times,func=lvccmat)
plot(out)
dY<-(rs*y*ks - rs*y^2 - rs*colSums(outer(state,state,FUN ="*")*alphas))*(1/ks)
lvccmat<-function(t,Y,parameters)
{
y<-matrix(data=Y,nrow=size)
dY<-(rs*y*ks - rs*y^2 - rs*colSums(outer(state,state,FUN ="*")*alphas))*(1/ks)
return(list(dY))
}
out<-ode(y=state,times=times,func=lvccmat)
plot(out)
lvccmat<-function(t,Y,parameters)
{
y<-matrix(data=Y,nrow=size)
dY<-(rs*y*ks - rs*y^2*(1/ks) - rs*colSums(outer(state,state,FUN ="*")*alphas))*(1/ks)
return(list(dY))
}
out<-ode(y=state,times=times,func=lvccmat)
plot(out)
lvccmat<-function(t,Y,parameters)
{
y<-matrix(data=Y,nrow=size)
dY<-rs*y - (rs*y^2 - rs*colSums(outer(state,state,FUN ="*")*alphas))*(1/ks)
return(list(dY))
}
out<-ode(y=state,times=times,func=lvccmat)
plot(out)
lvccmat<-function(t,Y,parameters)
{
y<-matrix(data=Y,nrow=size)
dY<-rs*y - (rs*y^2*ks - rs*colSums(outer(state,state,FUN ="*")*alphas))*(1/ks)
return(list(dY))
}
out<-ode(y=state,times=times,func=lvccmat)
plot(out)
lvccmat<-function(t,Y,parameters)
{
y<-matrix(data=Y,nrow=size)
dY<-rs*y - rs*y^2* - (rs*colSums(outer(state,state,FUN ="*")*alphas))*(1/ks)
return(list(dY))
}
out<-ode(y=state,times=times,func=lvccmat)
plot(out)
lvccmat<-function(t,Y,parameters)
{
y<-matrix(data=Y,nrow=size)
dY<-rs*y - rs*y^2 - (rs*colSums(outer(state,state,FUN ="*")*alphas))*(1/ks)
return(list(dY))
}
out<-ode(y=state,times=times,func=lvccmat)
plot(out)
alphas
lvccmat<-function(t,Y,parameters)
{
y<- matrix(data=Y,nrow=size)
dY<- rs*y - rs*y^2 - (rs*colSums(outer(y,y,FUN ="*")*alphas))*(1/ks)
return(list(dY))
}
out<-ode(y=state,times=times,func=lvccmat)
plot(out)
lvccmat<-function(t,Y,parameters)
{
y<- matrix(data=Y,nrow=size)
print(y)
dY<- rs*y - rs*y^2 - (rs*colSums(outer(y,y,FUN ="*")*alphas))*(1/ks)
return(list(dY))
}
out<-ode(y=state,times=times,func=lvccmat)
plot(out)
{
y<- matrix(data=Y,nrow=size)
print(outer(y,y,FUN="*"))
dY<- rs*y - rs*y^2 - (rs*colSums(outer(y,y,FUN ="*")*alphas))*(1/ks)
return(list(dY))
}
lvccmat<-function(t,Y,parameters)
{
y<- matrix(data=Y,nrow=size)
print(outer(y,y,FUN="*"))
dY<- rs*y - rs*y^2 - (rs*colSums(outer(y,y,FUN ="*")*alphas))*(1/ks)
return(list(dY))
}
out<-ode(y=state,times=times,func=lvccmat)
rs
lvccmat<-function(t,Y,parameters)
{
y<- matrix(data=Y,ncol=size)
print(outer(y,y,FUN="*"))
dY<- rs*y - rs*y^2 - (rs*colSums(outer(y,y,FUN ="*")*alphas))*(1/ks)
return(list(dY))
}
out<-ode(y=state,times=times,func=lvccmat)
lvccmat<-function(t,Y,parameters)
{
y<- Y
print(outer(y,y,FUN="*"))
dY<- rs*y - rs*y^2 - (rs*colSums(outer(y,y,FUN ="*")*alphas))*(1/ks)
return(list(dY))
}
out<-ode(y=state,times=times,func=lvccmat)
plot(out)
lvccmat<-function(t,Y,parameters)
{
y<- Y
dY<- rs*y - rs*y^2 - (rs*colSums(outer(y,y,FUN ="*")*alphas))*(1/ks)
return(list(dY))
}
out<-ode(y=state,times=times,func=lvccmat)
plot(out)
rs<-c(1.2,0.5) #growth rates
out<-ode(y=state,times=times,func=lvccmat)
plot(out)
lvccmat<-function(t,Y,parameters)
{
y<- Y
dY<- rs*y - rs*y^2 + (rs*colSums(outer(y,y,FUN ="*")*alphas))*(1/ks)
return(list(dY))
}
out<-ode(y=state,times=times,func=lvccmat)
plot(out)
lvccmat<-function(t,Y,parameters)
{
y<- Y
dY<- rs*y - (rs*y^2*ks + rs*colSums(outer(y,y,FUN ="*")*alphas))*(1/ks)
return(list(dY))
}
out<-ode(y=state,times=times,func=lvccmat)
plot(out)
lvccmat<-function(t,Y,parameters)
{
y<- Y #transform Y in a local vector
#use the local vector to construct the system of ODEs
dY<- rs*y - (rs*y^2 - rs*colSums(outer(y,y,FUN ="*")*alphas))*(1/ks)
return(list(dY))
}
out<-ode(y=state,times=times,func=lvccmat)
plot(out)
lvccmat<-function(t,Y,parameters)
{
y<- Y #transform Y in a local vector
#use the local vector to construct the system of ODEs
dY<- rs*y - (rs*y^2 + rs*colSums(outer(y,y,FUN ="*")*alphas))*(1/ks)
return(list(dY))
}
out<-ode(y=state,times=times,func=lvccmat)
plot(out)
tail(out)
alphas<-matrix(c(0, 0.9, 0.1, 0),nrow=2,byrow = T) #competition coefs.
out<-ode(y=state,times=times,func=lvccmat)
plot(out)
state<-rep(10, size)
out<-ode(y=state,times=times,func=lvccmat)
plot(out)
size
source('~/harvest/R/lvcc5sp.R')
source('~/harvest/R/lvcc5sp.R')
tail(out)
names(state)<-paste("N",1:size,sep="")
out<-ode(y=state,times=times,func=lvccmat)
plot(out)
source('~/harvest/R/lvccmat.R')
source('~/harvest/R/lvccmat.R')
source('~/harvest/R/lvccmat.R')
source('~/harvest/R/lvcc5sp.R')
source('~/harvest/R/lvcclaird.R')
alphas
source('~/harvest/R/lvcclaird.R')
source('~/harvest/R/lvcclaird.R')
plot(out[,"N1"], out[,"N2"])
plot(out[,"N1"], out[,"N2"])
plot(out[,"N1"], out[,"N2"],type="l")
plot(out[,"N1"], out[,"N3"],type="l")
plot(out[,"N1"], out[,"N4"],type="l")
plot(out[,"N1"], out[,"N5"],type="l")
source('~/harvest/R/lvcc5sp.R')
state
source('~/harvest/R/lvcc5sp.R')
source('~/harvest/R/lvcc5sp.R')
source('~/harvest/R/lvcc5sp.R')
source('~/harvest/R/lvcc5sp.R')
source('~/harvest/R/lvcc5sp.R')
source('~/harvest/R/lvcc5sp.R')
source('~/harvest/R/lvcc5sp.R')
source('~/harvest/R/lvcc5sp.R')
source('~/harvest/R/lvcc5sp.R')
source('~/harvest/R/lvcc5sp.R')
source('~/harvest/R/lvcc5sp.R')
source('~/harvest/R/lvcc5sp.R')
source('~/harvest/R/lvcc5sp.R')
source('~/harvest/R/lvcclaird.R')
source('~/harvest/R/lvcclaird.R')
source('~/harvest/R/lvcclaird.R')
source('~/harvest/R/lvcclaird.R')
source('~/harvest/R/lvcc5sp.R')
source('~/harvest/R/lvcc5sp.R')
source('~/harvest/R/lvcc5sp.R')
plot(NI,N2)
plot(N1,N2)
plot(out[,N1],out[N2])
plot(out[,N1],out[,N2])
plot(out[,"N1"],out[,"N2"])
plot(out[,"N1"],out[,"N2"],type="l")
source('~/harvest/R/lvcc5sp.R')
plot(out[,"N1"],out[,"N2"],type="l")
source('~/harvest/R/lvcc5sp.R')
plot(out[,"N1"],out[,"N2"],type="l")
install.packages("rgl")
library("rgl", lib.loc="~/R/win-library/3.2")
plot (out[,"N1"],out[,"N2"],out[,"N3"],type="l")
plot3d(out[,"N1"],out[,"N2"],out[,"N3"],type="l")
source('~/harvest/R/lvcc5sp.R')
plot3d(out[,"N1"],out[,"N2"],out[,"N3"],type="l")
source('~/harvest/R/lvcc5sp.R')
plot3d(out[,"N1"],out[,"N2"],out[,"N3"],type="l")
source('~/harvest/R/lvcc5sp.R')
plot3d(out[,"N1"],out[,"N2"],out[,"N3"],type="l")
source('~/harvest/R/lvcc5sp.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/harvest/R/lvcc5sp.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
eq<-out[length(times)-50,length(times),]
eq<-out[(length(times)-50),length(times),]
eq<-out[(length(times)-50):length(times),]
eq
apply(eq,2,FUN="min")
apply(eq,2,FUN=c("min","max")
)
minmax<-function(df)
{
c(min=min(df),max=max(df))
}
apply(eq,2,FUN=minmax)
equilibria<-function(df)
{
#this function takes the output of an ode solve, clips out
#the last 50 entries and find if they are at equilibria
eq<-out[(length(times)-50):length(times),]
#check if the equilibrium was reached
minmax<-function(df){c(min=min(df),max=max(df))}
eqminmax<-apply(eq,2,minmax)
eqminmax[min,]==eqminmax[max,]
}
apply(eq,2,FUN=equilibria)
equilibria(out)
equilibria<-function(df)
{
#this function takes the output of an ode solve, clips out
#the last 50 entries and find if they are at equilibria
eq<-out[(length(df)-50):length(df),]
#check if the equilibrium was reached
minmax<-function(df){c(min=min(df),max=max(df))}
eqminmax<-apply(eq,2,minmax)
eqminmax[min,]==eqminmax[max,]
}
equilibria(out)
length(out)
dim(out)
equilibria<-function(df)
{
sz<-dim(df)
#this function takes the output of an ode solve, clips out
#the last 50 entries and find if they are at equilibria
eq<-out[(sz[1]-50):sz[1],]
#check if the equilibrium was reached
minmax<-function(df){c(min=min(df),max=max(df))}
eqminmax<-apply(eq,2,minmax)
eqminmax[min,]==eqminmax[max,]
}
equilibria(out)
equilibria<-function(df)
{
sz<-dim(df)
#this function takes the output of an ode solve, clips out
#the last 50 entries and find if they are at equilibria
eq<-out[(sz[1]-50):sz[1],]
#check if the equilibrium was reached
minmax<-function(x){c(min=min(x),max=max(x))}
eqminmax<-apply(eq,2,minmax)
eqminmax[min,]==eqminmax[max,]
}
equilibria(out)
equilibria<-function(df)
{
sz<-dim(df)
#this function takes the output of an ode solve, clips out
#the last 50 entries and find if they are at equilibria
eq<-out[(sz[1]-50):sz[1],]
#check if the equilibrium was reached
minmax<-function(x){c(min=min(x),max=max(x))}
eqminmax<-apply(eq,2,minmax)
eqminmax["min",]==eqminmax["max",]
}
equilibria(out)
equilibria<-function(df)
{
sz<-dim(df)
#this function takes the output of an ode solve, clips out
#the last 50 entries and find if they are at equilibria
eq<-out[(sz[1]-50):sz[1],]
#check if the equilibrium was reached
minmax<-function(x){c(min=min(x),max=max(x))}
eqminmax<-apply(eq,2,minmax)
abs(eqminmax["min",]-eqminmax["max",])<0.01
}
equilibria(out)
equilibria<-function(df)
{
sz<-dim(df)
#this function takes the output of an ode solve, clips out
#the last 50 entries and find if they are at equilibria
eq<-out[(sz[1]-50):sz[1],2:sz[2]]
#check if the equilibrium was reached
minmax<-function(x){c(min=min(x),max=max(x))}
eqminmax<-apply(eq,2,minmax)
abs(eqminmax["min",]-eqminmax["max",])<0.01
}
equilibria(out)
equilibria<-function(df)
{
sz<-dim(df)
#this function takes the output of an ode solve, clips out
#the last 50 entries and find if they are at equilibria
eq<-out[(sz[1]-50):sz[1],2:sz[2]]
#check if the equilibrium was reached
minmax<-function(x){c(min=min(x),max=max(x))}
eqminmax<-apply(eq,2,minmax)
if(abs(eqminmax["min",]-eqminmax["max",])<0.01),"EQUI","notEQ"
}
equilibria(out)
equilibria<-function(df)
{
sz<-dim(df)
#this function takes the output of an ode solve, clips out
#the last 50 entries and find if they are at equilibria
eq<-out[(sz[1]-50):sz[1],2:sz[2]]
#check if the equilibrium was reached
minmax<-function(x){c(min=min(x),max=max(x))}
eqminmax<-apply(eq,2,minmax)
if(abs(eqminmax["min",]-eqminmax["max",])<0.01){"EQUI","notEQ"}
}
equilibria(out)
equilibria<-function(df)
{
sz<-dim(df)
#this function takes the output of an ode solve, clips out
#the last 50 entries and find if they are at equilibria
eq<-out[(sz[1]-50):sz[1],2:sz[2]]
#check if the equilibrium was reached
minmax<-function(x){c(min=min(x),max=max(x))}
eqminmax<-apply(eq,2,minmax)
if(abs(eqminmax["min",]-eqminmax["max",])<0.01) "EQUI" else "notEQ"}
}
equilibria(out)
equilibria<-function(df)
{
sz<-dim(df)
#this function takes the output of an ode solve, clips out
#the last 50 entries and find if they are at equilibria
eq<-out[(sz[1]-50):sz[1],2:sz[2]]
#check if the equilibrium was reached
minmax<-function(x){c(min=min(x),max=max(x))}
eqminmax<-apply(eq,2,minmax)
eqminmax["min",]-eqminmax["max",])<0.01)
}
equilibria(out)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
qnorm(0.995)
pnorm(3)
pnorm(3)-pnorm(-3)
pnorm(2.5758)-pnorm(-2.5758)
pnorm(1)-pnorm(-1)
pnorm(1.96)-pnorm(-1.96)
pnorm(3)-pnorm(-3)
test<-data.frame(uno=1,dos=2,tres=matrix(1,nrow=2,ncol=3))
test
test$uno
data.frame(uno=2,dos=22,tres=matrix(2,nrow=2,ncol=3))
test<-c(test,data.frame(uno=2,dos=22,tres=matrix(2,nrow=2,ncol=3)))
test
test<-rbind(test,data.frame(uno=2,dos=22,tres=matrix(2,nrow=2,ncol=3)))
test<-cbind(test,data.frame(uno=2,dos=22,tres=matrix(2,nrow=2,ncol=3)))
test
test<-rbind(test,data.frame(uno=2,dos=22,tres=matrix(2,nrow=2,ncol=3)))
test
test
test<-data.frame(uno=1,dos=2,tres=matrix(1,nrow=2,ncol=3))
test
test<-rbind(test,data.frame(uno=2,dos=22,tres=matrix(2,nrow=2,ncol=3)))
test
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
dfequi
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
dfequi
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
dfequi
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
dfequi
source('~/.active-rstudio-document')
source('~/harvest/R/lvccEQalpha.R')
View(tmp)
source('~/harvest/R/lvccEQalpha.R')
source('~/harvest/R/lvccEQalpha.R')
source('~/harvest/R/lvccEQalpha.R')
dfequi<-data.frame(alphaBIG=vbig,alphaSMALL=vsma,vequi=vtf)
dfequi
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/harvest/R/lvcc.R')
plot(out)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/Investigacion/Epidemiology/periodic.R')
source('~/Investigacion/Epidemiology/periodic.R')
source('~/Investigacion/Epidemiology/periodic.R')
source('~/Investigacion/Epidemiology/periodic.R')
source('~/Investigacion/Epidemiology/periodic.R')
source('~/Investigacion/Epidemiology/periodic.R')
source('~/Investigacion/Epidemiology/periodic.R')
source('~/Investigacion/Epidemiology/periodic.R')
source('~/Investigacion/Epidemiology/periodic.R')
source('~/Investigacion/Epidemiology/periodic.R')
source('~/Investigacion/Epidemiology/periodic.R')
source('~/Investigacion/Epidemiology/periodic.R')
source('~/Investigacion/Epidemiology/periodic.R')
source('~/Investigacion/Epidemiology/periodic.R')
source('~/Investigacion/Epidemiology/periodic.R')
source('~/Investigacion/Epidemiology/periodic.R')
source('~/Investigacion/Epidemiology/periodic.R')
source('~/Investigacion/Epidemiology/periodic.R')
source('~/Investigacion/Epidemiology/periodic.R')
source('~/Investigacion/Epidemiology/periodic.R')
source('~/Investigacion/Epidemiology/periodic.R')
source('~/Investigacion/Epidemiology/periodic.R')
source('~/Investigacion/Epidemiology/periodic.R')
source('~/Investigacion/Epidemiology/periodic.R')
source('~/Investigacion/Epidemiology/periodic.R')
source('~/Investigacion/Epidemiology/periodic.R')
source('~/Investigacion/Epidemiology/periodic.R')
source('~/Investigacion/Epidemiology/periodic.R')
source('~/Investigacion/Epidemiology/periodic.R')
source('~/Investigacion/Epidemiology/periodic.R')
source('~/Investigacion/Epidemiology/periodic.R')
source('~/Investigacion/Epidemiology/periodic.R')
source('~/Investigacion/Epidemiology/periodic.R')
source('~/Investigacion/Epidemiology/periodic.R')
source('~/Investigacion/Epidemiology/periodic.R')
source('~/Investigacion/Epidemiology/periodic.R')
source('~/Investigacion/Epidemiology/periodic.R')
source('~/Investigacion/Epidemiology/periodic.R')
plot(out,ylim=c(0,0.009))
plot(out,ylim=c(0.004,0.005))
plot(out,ylim=c(0.004,0.005),xlim=c(0,100))
plot(out,ylim=c(0.004,0.005),xlim=c(60,100))
plot(out,ylim=c(0.0042,0.005),xlim=c(60,100))
plot(out,ylim=c(0.0044,0.005),xlim=c(60,100))
plot(out,ylim=c(0.0044,0.0045),xlim=c(60,100))
